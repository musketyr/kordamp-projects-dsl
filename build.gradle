import com.google.common.base.CaseFormat

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath group: 'com.google.guava', name: 'guava', version: '29.0-jre'
    }
}

plugins {
    id 'org.kordamp.gradle.groovy-project'
    id 'org.kordamp.gradle.checkstyle'
    id 'org.kordamp.gradle.codenarc'
    id 'org.sonarqube'
}

config {
    release = (rootProject.findProperty('release') ?: false).toBoolean()

    info {
        name = 'Kordamp Projects DSL'
        vendor = 'Agorapulse'
        description = 'Kordamp Projects DSL Test Project'

        links {
            website      = "https://github.com/" + slug
            issueTracker = "https://github.com/" + slug + "/issues"
            scm          = "https://github.com/" + slug + ".git"
        }

        people {
            person {
                id    = 'musketyr'
                name  = 'Vladimir Orany'
                roles = ['developer']
            }
        }
    }

    licensing {
        enabled = false
        // TODO: specify license and appropriate header if required
        licenses {
            license {
                id = 'Apache-2.0'
            }
        }
    }

    quality {
        checkstyle {
            toolVersion = '8.27'
        }

        codenarc {
            toolVersion = '1.5'
        }
    }
}

projects {
    subprojects {
        dirs(['apis', 'services']) {
                shadowJar {
                    mergeServiceFiles()
                    mergeGroovyExtensionModules()
                    transform(com.github.jengelman.gradle.plugins.shadow.transformers.Log4j2PluginsCacheFileTransformer)
                    append 'application.yml'
                }

                aws {
                    region = 'eu-west-1'
                    profileName = 'beta'
                }
        }

        dir('apis') { Project sub ->
            String upperCamelName = CaseFormat.LOWER_HYPHEN.to(CaseFormat.UPPER_CAMEL, sub.name)
                dependencies {
                    testImplementation 'com.agorapulse:gru-http'
                    testImplementation 'io.micronaut:micronaut-http-server-netty'

                    testImplementation group: 'org.testcontainers', name: 'testcontainers', version: testcontainersVersion
                    testImplementation group: 'org.testcontainers', name: 'spock', version: testcontainersVersion
                    testImplementation group: 'org.testcontainers', name: 'localstack', version: testcontainersVersion
                    testImplementation group: 'com.amazonaws', name: 'aws-java-sdk-core', version: awsSdkV1Version
                }

                task deploy(type: jp.classmethod.aws.gradle.lambda.AWSLambdaMigrateFunctionTask, dependsOn: shadowJar) {
                    functionName = upperCamelName
                    handler = 'agorapulse.notification.services.StreamLambdaHandler'
                    role = "arn:aws:iam::$aws.accountId:role/${upperCamelName}Lambda"
                    runtime = com.amazonaws.services.lambda.model.Runtime.Java8
                    zipFile = shadowJar.archivePath
                    memorySize = 1024
                    timeout = 120
                }

                // you can customize the settings individually in the projects using following snippet
                // afterEvaluate {
                //     deploy {
                //         memorySize = 512
                //     }
                // }
        }

        dir('services') { Project sub ->
            String upperCamelName = CaseFormat.LOWER_HYPHEN.to(CaseFormat.UPPER_CAMEL, sub.name)
            String pkg = 'agorapulse.notification.services.' + sub.name.split('-').findAll { it != 'notification' }.join('.')
                dependencies {
                    api project(':notification-service-blueprint')
                }

                task deploy(type: jp.classmethod.aws.gradle.lambda.AWSLambdaMigrateFunctionTask, dependsOn: shadowJar) {
                    functionName = upperCamelName
                    handler = "${pkg}.${upperCamelName}Handler::apply"
                    role = "arn:aws:iam::$aws.accountId:role/${upperCamelName}Lambda"
                    runtime = com.amazonaws.services.lambda.model.Runtime.Java8
                    zipFile = shadowJar.archivePath
                    memorySize = 1024
                    timeout = 120
                }

                // you can customize the settings individually in the projects using following snippet
                // afterEvaluate {
                //     deploy {
                //         memorySize = 512
                //     }
                // }
        }
    }
}

allprojects {
    repositories {
        jcenter()
        mavenCentral()
        maven { url  "https://dl.bintray.com/agorapulse/libs" }
        maven { url "https://repo.spring.io/release"  }
    }

    license {
        exclude '**/*.json'
        exclude '***.yml'
    }
}

subprojects { subproject ->
    apply plugin: 'groovy'
    apply plugin: 'java-library'

    configurations {
        // for dependencies that are needed for development only
        developmentOnly

        all {
            exclude group: 'ch.qos.logback', module: 'logback-classic'
        }
    }

    dependencies {
        annotationProcessor platform("io.micronaut:micronaut-bom:" + micronautVersion)
        api platform("io.micronaut:micronaut-bom:" + micronautVersion)
        implementation platform("io.micronaut:micronaut-bom:" + micronautVersion)
        developmentOnly platform("io.micronaut:micronaut-bom:" + micronautVersion)
        testAnnotationProcessor platform('io.micronaut:micronaut-bom:' + micronautVersion)
        testImplementation platform('io.micronaut:micronaut-bom:' + micronautVersion)

        annotationProcessor "io.micronaut:micronaut-inject-java"
        annotationProcessor "io.micronaut:micronaut-validation"

        api "io.micronaut:micronaut-inject"
        api "io.micronaut:micronaut-validation"
        api "io.micronaut:micronaut-runtime"

        compileOnly "io.micronaut:micronaut-inject-groovy"

        runtimeOnly 'org.apache.logging.log4j:log4j-slf4j18-impl:2.13.2'

        testAnnotationProcessor "io.micronaut:micronaut-inject-java"

        testImplementation "io.micronaut:micronaut-inject-groovy"
        testImplementation "io.micronaut.test:micronaut-test-spock"

        testImplementation("org.spockframework:spock-core") {
            exclude group: "org.codehaus.groovy", module: "groovy-all"
        }
        testImplementation 'net.bytebuddy:byte-buddy:1.10.6'
        testImplementation "org.objenesis:objenesis:3.1"

        testImplementation "com.stehno.ersatz:ersatz:1.9.0"
        testImplementation "io.undertow:undertow-core:2.0.13.Final"
    }

    test.classpath += configurations.developmentOnly

    // useful for Micronaut
    tasks.withType(GroovyCompile) {
        groovyOptions.forkOptions.jvmArgs.add('-Dgroovy.parameters=true')
    }

    // useful for Micronaut
    tasks.withType(JavaCompile){
        options.encoding = "UTF-8"
        options.compilerArgs.add('-parameters')
    }

    // location independent tests (useful for stable CI builds)
    tasks.withType(Test){
        environment 'TEST_RESOURCES_FOLDER', new File(subproject.projectDir, 'src/test/resources').canonicalPath
        environment 'AWS_CBOR_DISABLE', 'true'

        systemProperty 'user.timezone', 'UTC'
        systemProperty 'user.language', 'en'
    }

    tasks.withType(JavaCompile){
        options.encoding = "UTF-8"
        options.compilerArgs.add('-parameters')
    }

    tasks.withType(GroovyCompile) {
        groovyOptions.forkOptions.jvmArgs.add('-Dgroovy.parameters=true')
    }

    tasks.withType(JavaExec) {
        classpath += configurations.developmentOnly
        jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote', '-Dmicronaut.environments=dev')
        // environment(System.getenv())
    }

    // useful for IntelliJ
    task cleanOut(type: Delete) {
        delete file('out')
    }

    clean.dependsOn cleanOut
}

check.dependsOn('aggregateCheckstyle', 'aggregateCodenarc', 'aggregateAllTestReports', 'aggregateJacocoReport')
check.finalizedBy('sonarqube')

tasks.findByName('sonarqube').configure {
    onlyIf {
        System.getenv('SONAR_TOKEN') || System.getProperty('sonar.login')
    }
    dependsOn 'check'
}

sonarqube {
    properties {
        property 'sonar.login', System.getenv('SONAR_TOKEN')

        property 'sonar.coverage.jacoco.xmlReportPaths', rootProject.file('build/reports/jacoco/aggregate/jacocoTestReport.xml').canonicalPath
        property 'sonar.java.checkstyle.reportPaths', rootProject.file('build/reports/checkstyle/aggregate.xml').canonicalPath
        property 'sonar.groovy.codenarc.reportPaths', rootProject.file('build/reports/codenarc/aggregate.xml').canonicalPath
        property 'sonar.groovy.jacoco.reportPath', rootProject.file('build/jacoco/aggregate.exec').canonicalPath

        String refHead = System.getenv('HEAD_REF')
        String baseHead = System.getenv('BASE_REF')
        String prNumber = System.getenv('PULL_REQUEST_NUMBER')
        String branchName = System.getenv('BRANCH_NAME')

        if (refHead && baseHead && prNumber) {
            property 'sonar.pullrequest.key', prNumber
            property 'sonar.pullrequest.branch', refHead
            property 'sonar.pullrequest.base', baseHead
        } else if (branchName) {
            if (branchName.startsWith('refs/heads/')) {
                branchName = branchName - 'refs/heads/'
            }
            property "sonar.branch.name", branchName
        }
    }
}
